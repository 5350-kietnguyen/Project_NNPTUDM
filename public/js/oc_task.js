// M·ªü modal t·∫°o c√¥ng vi·ªác
document.getElementById('create-task-btn').addEventListener('click', () => {
    fetchCategories(); // Load danh s√°ch category tr∆∞·ªõc m·ªói l·∫ßn m·ªü modal
    document.getElementById('create-task-modal').style.display = 'block';
});

// ƒê√≥ng modal t·∫°o c√¥ng vi·ªác
document.getElementById('close-create-modal-btn').addEventListener('click', () => {
    document.getElementById('create-task-modal').style.display = 'none';
});

// M·ªü modal ch·ªânh s·ª≠a c√¥ng vi·ªác
function openEditModal(id, title, description, status, categoryId) {
    document.getElementById('edit-title').value = title;
    document.getElementById('edit-description').value = description;
    document.getElementById('edit-status').value = status;  // ƒêi·ªÅn tr·∫°ng th√°i v√†o dropdown

    // ƒêi·ªÅn category v√†o dropdown
    document.getElementById('edit-category').value = categoryId; // S·ª≠ d·ª•ng _id c·ªßa category trong modal ch·ªânh s·ª≠a
    
    // ƒê·∫£m b·∫£o tr·∫°ng th√°i ƒë∆∞·ª£c ƒëi·ªÅn ƒë√∫ng v√†o dropdown
    const statusOptions = document.getElementById('edit-status').options;
    for (let i = 0; i < statusOptions.length; i++) {
        if (statusOptions[i].value === status) {
            statusOptions[i].selected = true;  // ƒê√°nh d·∫•u tr·∫°ng th√°i ƒë√£ ch·ªçn
            break;
        }
    }

    document.getElementById('edit-task-modal').style.display = 'block';
    document.getElementById('edit-task-form').onsubmit = (e) => {
        e.preventDefault();
        editTask(id);
    };
}

// ƒê√≥ng modal ch·ªânh s·ª≠a c√¥ng vi·ªác
document.getElementById('close-edit-modal-btn').addEventListener('click', () => {
    document.getElementById('edit-task-modal').style.display = 'none';
});

// M·ªü modal x√≥a c√¥ng vi·ªác
function openDeleteModal(id) {
    document.getElementById('delete-task-modal').style.display = 'block';
    document.getElementById('confirm-delete-btn').onclick = () => {
        deleteTask(id);
    };
}

// ƒê√≥ng modal x√≥a c√¥ng vi·ªác
document.getElementById('close-delete-modal-btn').addEventListener('click', () => {
    document.getElementById('delete-task-modal').style.display = 'none';
});

// H√†m l·∫•y th·ªëng k√™ theo tr·∫°ng th√°i
function getStatusCounts(tasks) {
    const statusCounts = { 'Ch∆∞a ho√†n th√†nh': 0, 'ƒêang ti·∫øn h√†nh': 0, 'Ho√†n th√†nh': 0 };
    tasks.forEach(task => {
        if (task.status in statusCounts) {
            statusCounts[task.status]++;
        }
    });
    return statusCounts;
}

// H√†m v·∫Ω bi·ªÉu ƒë·ªì th·ªëng k√™ theo tr·∫°ng th√°i
function displayStatusChart(statusCounts) {
    const ctx = document.getElementById('statusChart').getContext('2d');

    if (window.statusChartInstance) {
        window.statusChartInstance.destroy();
    }

    // T·∫°o gradient m√†u
    const gradientRed = ctx.createLinearGradient(0, 0, 0, 400);
    gradientRed.addColorStop(0, "#f87171");
    gradientRed.addColorStop(1, "#fca5a5");

    const gradientYellow = ctx.createLinearGradient(0, 0, 0, 400);
    gradientYellow.addColorStop(0, "#fde68a");
    gradientYellow.addColorStop(1, "#facc15");

    const gradientGreen = ctx.createLinearGradient(0, 0, 0, 400);
    gradientGreen.addColorStop(0, "#6ee7b7");
    gradientGreen.addColorStop(1, "#34d399");

    window.statusChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: Object.keys(statusCounts),
            datasets: [{
                label: 'C√¥ng Vi·ªác Theo Tr·∫°ng Th√°i',
                data: Object.values(statusCounts),
                backgroundColor: [gradientRed, gradientYellow, gradientGreen],
                borderRadius: 12,
                hoverOffset: 10
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    backgroundColor: '#111827',
                    titleColor: '#fff',
                    bodyColor: '#d1d5db',
                    padding: 12,
                    cornerRadius: 8,
                    borderColor: '#4b5563',
                    borderWidth: 1
                }
            },
            scales: {
                x: {
                    grid: { display: false },
                    ticks: {
                        font: { size: 14, weight: 'bold' },
                        color: '#1f2937'
                    }
                },
                y: {
                    beginAtZero: true,
                    grid: { color: 'rgba(0,0,0,0.05)' },
                    ticks: {
                        stepSize: 1,
                        font: { size: 13 },
                        color: '#6b7280'
                    }
                }
            }
        }
    });
}

//light/dark mode
document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('toggle-theme-btn');
    const prefersDark = localStorage.getItem('theme') === 'dark';

    if (prefersDark) {
        document.body.classList.add('dark-mode');
        toggleBtn.textContent = '‚òÄÔ∏è';
    }

    toggleBtn.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode');
        const isDark = document.body.classList.contains('dark-mode');
        toggleBtn.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
});